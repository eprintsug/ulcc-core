#!/usr/bin/perl
use strict;
use warnings;
use CGI;
use JSON;
use Text::CSV_XS;
use Data::Dumper;

# New session
my $session = new EPrints::Session();
exit( 0 ) unless( defined $session );

if( !$session->current_user )
{
    $session->terminate;
    exit( 0 );
}

if( !$session->current_user->has_role( 'admin' ) )
{
    $session->terminate;
    exit( 0 );
}

my $repo_id = $session->id;

my $cgi = CGI->new;
print $cgi->header('application/json');

my $query = $cgi->param('query') || '';
if( $query eq "current" )
{
    my $app_mount_point = "/var/www/eprints";

    my $app_output = `df -k '$app_mount_point'`;
    if( $app_output eq "" )
    {
        print to_json({ error => 'Failed to retrieve current data' });
        exit;
    }

    # Parse df output
    my @lines = split /\n/, $app_output;
    shift @lines; # skip header line
    
    my ($filesystem, $size, $used, $available, $use, $mount) = split /\s+/, $lines[0];
    
    # Convert KB to GB
    my $allocated_gb = sprintf("%.2f", $size / 1024 / 1024);
    my $used_gb   = sprintf("%.2f", $used   / 1024 / 1024);
    my $available_gb = sprintf("%.2f", $available / 1024 / 1024);

    # knock percent symbol off the end
    $use = substr( $use, 0, -1 );

    # calculate status
    my $status = $use <= 75 ? "success" : $use < 90 ? "warning" : "danger";

    # and now do the same again for database!
    my $db_mount_point = "/database"; 

    my $db_output = `df -k '$db_mount_point'`;
    if( $db_output eq "" )
    {
        print to_json({ error => 'Failed to retrieve current data' });
        exit;
    }

    # Parse df output
    my @db_lines = split /\n/, $db_output;
    shift @db_lines; # skip header line
    
    my( $db_filesystem, $db_size, $db_used, $db_available, $db_use, $db_mount ) = split /\s+/, $db_lines[0];
    
    # Convert KB to GB
    my $db_allocated_gb = sprintf("%.2f", $db_size / 1024 / 1024);
    my $db_used_gb   = sprintf("%.2f", $db_used   / 1024 / 1024);
    my $db_available_gb = sprintf("%.2f", $db_available / 1024 / 1024);

    # knock percent symbol off the end
    $db_use = substr( $db_use, 0, -1 );

    # calculate status
    my $db_status = $db_use <= 75 ? "success" : $db_use < 90 ? "warning" : "danger";

    print to_json({
        use_percent => $use,
        allocated_gb => $allocated_gb,
        used_gb => $used_gb,
        available_gb => $available_gb,
        status => $status,
        db_use_percent => $db_use,
        db_allocated_gb => $db_allocated_gb,
        db_used_gb => $db_used_gb,
        db_available_gb => $db_available_gb,
        db_status => $db_status,
    });

    exit;
}

my $year;
my $month;
if( $query =~ /^([0-9]{4})-([0-9]{2})$/ )
{
    $year = $1;
    $month = $2;
}
else
{
    print to_json({ error => 'Invalid month format' });
    exit;
}

# is this older data
my $legacy_data = 0;
if( $year < 2025 || ($year == 2025 && $month == "01" ) )
{
    $legacy_data = 1;
}

# now work out the filename
my $filename;
my $app_filename;
my $db_filename;

if( $legacy_data )
{
    $filename = "/var/www/monthly-reports/data/$year-$month/services.csv";
    if( !-e $filename )
    {
        print to_json({ error => "Data not found" });
        exit;
    }
}
else
{
    $app_filename = "/var/www/monthly-reports/data/$year-$month/$repo_id"."_app_disk_usage";
    $db_filename = "/var/www/monthly-reports/data/$year-$month/$repo_id"."_db_disk_usage";

    if( !-e $app_filename )
    {
        print to_json({ error => "Data not found" });
        exit;
    }

    if( !-e $db_filename )
    {
        print to_json({ error => "Data not found" });
        exit;
    }
}

my $app_filesystem;
my $app_size;
my $app_used;
my $app_available;
my $app_use;
my $app_mount;
my $app_allocated_gb;
my $app_used_gb;
my $app_available_gb;
my $app_status = "success";

my $db_filesystem;
my $db_size;
my $db_used;
my $db_available;
my $db_use;
my $db_mount;
my $db_allocated_gb;
my $db_used_gb;
my $db_available_gb;
my $db_status = "success";


my $found_data = 0;
if( !$legacy_data )
{
    open( my $app_fh, '<', $app_filename ) or die to_json({ error => "File not found" });
    while( my $line = <$app_fh> )
    {
        chomp $line;

        # new format
        if( $line =~ /^.*? (\d+)%/ )
        {
            $found_data = 1;

            ($app_filesystem, $app_size, $app_used, $app_available, $app_use, $app_mount) = split /\s+/, $line;
    
            # Convert KB to GB
            $app_allocated_gb = sprintf("%.2f", $app_size / 1024 / 1024);
            $app_used_gb   = sprintf("%.2f", $app_used   / 1024 / 1024);
            $app_available_gb = sprintf("%.2f", $app_available / 1024 / 1024);

            # knock percent symbol off the end
            $app_use = substr( $app_use, 0, -1 );

            $app_status = $app_use <= 75 ? "success" : $app_use < 90 ? "warning" : "danger";
        }
    }
    close($app_fh);

    # and now do the same again for the database
    open( my $db_fh, '<', $db_filename ) or die to_json({ error => "File not found" });
    while( my $line = <$db_fh> )
    {
        chomp $line;

        # new format
        if( $line =~ /^.*? (\d+)%/ )
        {
            $found_data = 1;

            ($db_filesystem, $db_size, $db_used, $db_available, $db_use, $db_mount) = split /\s+/, $line;
    
            # Convert KB to GB
            $db_allocated_gb = sprintf("%.2f", $db_size / 1024 / 1024);
            $db_used_gb   = sprintf("%.2f", $db_used   / 1024 / 1024);
            $db_available_gb = sprintf("%.2f", $db_available / 1024 / 1024);

            # knock percent symbol off the end
            $db_use = substr( $db_use, 0, -1 );

            $db_status = $db_use <= 75 ? "success" : $db_use < 90 ? "warning" : "danger";
        }
    }
    close($db_fh);

}
elsif( $legacy_data )
{
    my $csv = Text::CSV_XS->new ({ binary => 1, auto_diag => 1 });
    open my $fh, "<:encoding(utf-8)", $filename or die "...";
    $csv->column_names( $csv->getline( $fh ) );
    while( my $fields = $csv->getline_hr( $fh ) )
    {
        my $domain = $session->config( "host" );
        if( $fields->{Service} eq $domain )
        {
            $app_allocated_gb = sprintf("%.2f", $fields->{'Storage Allocation GB'});
            $app_used_gb = $fields->{'Storage Used GB'};
            $app_use = int( ( $app_used_gb / $app_allocated_gb ) * 100 );
            $app_available_gb = $app_allocated_gb - $app_used_gb;
            $app_status = $app_use <= 75 ? "success" : $app_use < 90 ? "warning" : "danger";
            $found_data = 1;
            last;
        }              
    }   
    close($fh);
}
 
if( !$found_data )
{
    print to_json({ error => "Could not find data" });
    exit;
}

print to_json({
    use_percent => $app_use,
    allocated_gb => $app_allocated_gb,
    used_gb => $app_used_gb,
    available_gb => $app_available_gb,
    status => $app_status,
    db_use_percent => $db_use,
    db_allocated_gb => $db_allocated_gb,
    db_used_gb => $db_used_gb,
    db_available_gb => $db_available_gb,
    db_status => $db_status,
    legacy_data => $legacy_data,
});
